//{============================================================================
//! @file       Doc/2_Examples.txt
//! @brief      Описания примеров библиотеки TXLib
//}============================================================================

//-----------------------------------------------------------------------------
/*! @page       Tutor_1st             Пример: Простейший

    @section    Tutor_1st_01          Структура простейшей программы

    Простейшая программа на С (или С++) состоит из двух частей: раздела
    подключения библиотек и главной функции программы. Рассмотрим пример,
    в котором рисуется на экране простой рисунок.

    @section    Tutor_1st_02          Раздел подключения библиотек

    Директивы (команды) подключения библиотек находятся обычно в начале
    файла программы и выглядят обычно так:

    @code
    #include <stdlib.h>
    #include "TXLib.h"
    @endcode

    @c Stdlib.h и @c TXLib.h - файлы библиотек, которые подключаются к вашей
    программе. После этого вы можете использовать команды, функции и переменные,
    объявленные в этих файлах. Больше, чем нужно, библиотек подключать не стоит,
    хотя это и не вредно. Когда используется много библиотек, раздел может быть
    очень большим.

    @section    Tutor_1st_03          Главная функция программы

    Программа на С (С++) состоит из функций. Функция - это описание каких-либо
    действий с заданным именем (названием).

    Например,

    @code
    int main()
        {
        txCreateWindow (800, 600);
        txLine (320, 290, 320, 220);
        return 0;
        }
    @endcode

    Главная функция - это функция, с которой начинается исполнение программы.
    Ее имя - @c main(). Скобки показывают, что речь идет именно о функции, т.е.,
    об описании каких-то действий. Для того, чтобы функция начала работу, ее
    нужно @a вызвать. Функцию @c main() вызывает сама операционная система
    компьютера. Слово @c int означает, что @c main() в конце работы передаст
    тому, кто ее вызывал (операционной системе), некое целое число. Это число
    для функции main() означает код завершения нашей программы. Если он равен 0,
    то работа программы считается успешной.

    Действия, записанные в функции, заключаются в фигурные скобки @c { и @c }.
    Они обозначают начало и конец функции.

    Внутри функции записаны вызовы команд, которые что-то рисуют на экране.
    Между командами, там, где это логически необходимо, стоят пустые строки,
    отделяющие одни части программы от других. Это способствует большей
    понятности программы. Пустая строка в программировании соответствует
    началу абзаца текста в русском языке.

    Для понимания программы и того, чтобы в ней не появлялись ошибки, очень
    важно, чтобы в нужных местах в ней стояли пробелы. Обычно их ставят до
    открывающих круглых скобок, после запятых, до и после знаков операций.
    Наличие пробелов делает программу приятной на вид, и предотвращает
    напряжение глаз при работе с компьютером. Работа с плохо оформленным
    текстом программы может нанести вред глазам, снизить зрение.

    Пример плохо написанной программы:

    @code
    #include "TXLib.h"
    int   main(){
    txCreateWindow(800,600);  // По-моему, про зрение все ясно. :)
    txLine(320,290,320,220);
     txLine (320, 290,280,350);
      txLine(320, 290,360,350);
     txLine(320,230,270,275);
    txLine(320,230, 400,220);
    txCircle(320,190,30);
      txSelectFont( "Times",60);
    txTextOut(240,400,"Hello, world!");
              return        0;
    }
    @endcode

    Для задания положения рисуемых фигур используется координатная система,
    у которой верхний левый угол расположен слева-вверху, а ось OY смотрит
    вниз. Это несколько непривычно, но деваться некуда. :) Например, команда

    @code
    txLine (320, 290, 320, 220);
    @endcode

    проводит линию из точки x=320 и у=290 в точку с x=320 и y=220.

    Каждая команда заканчивается точкой с запятой. Это - аналог точки в русском
    языке. Точка с запятой ставится в конце каждого @a законченного действия
    или объявления. Например, в строке с @c txCreateWindow (800, 600) точка с
    запятой ставится, т.к. в этой строке "закончена мысль" о том, что надо
    создать окно для рисования. В строке с <tt>int main()</tt> - не ставится,
    т.к. описание функции @c main() не закончено (на самом деле, оно там только
    начато).

    Если в программе используются строки, они заключаются в двойные кавычки,
    например:

    @code
    txTextOut (240, 400, "Hello, world!");
    @endcode

    Если в программе присутствут числа с дробной частью, то эта часть
    отделяется от целой части точкой, а не запятой, как в русском языке.

    @section    Tutor_1st_04          Распространенные ошибки и борьба с ними

    В простых программах ошибки бывают двух видов:

    - Ошибки записи (орфография, пунктуация) - их называют синтаксическими
      ошибками <i>(syntax error).</i> Они происходят до запуска программы,
      на стадии перевода программы в машинный код (стадии компиляции). Поэтому
      их называют <i>ошибками времени компиляции (compile-time errors).</i>
      Исполняемый файл при этом не создается и программа не запускается.

    - Логические ошибки - они происходят после запуска программы, при этом
      при компиляции ошибок нет (иногда имеются предупреждения, @a warnings,
      которые полезно исправлять, а лучше не допускать их появления).
      Их называют <i>ошибками времени исполнения (runtime errors).</i>

    @par Ошибки времени компиляции

    Практически все синтаксические ошибки на этой стадии происходят из-за
    невнимательности. Распространенные синтаксические ошибки:

    - Путают ключевые слова, названия библиотек и команд:
      @code
      #iclude "TX lib.h"                // Правильно: #include "TXLib.h"
      in maim()                         // Правильно: int main()
      tx Line (10, 10, 20, 20)          // Правильно: txLine (10, 10, 20, 20);
      @endcode

    - Путают большие и маленькие буквы:
      @code
      txcircle (100, 100, 10)           // Правильно: txCircle
      @endcode

    - Не ставят скобки:
      @code
      int main                          // Правильно: main()
      @endcode

    - Забывают запятые или путают их с другими знаками:
      @code
      txСircle (100  100  10)           // Правильно: txCircle (100, 100, 10);
      txСircle (200; 200; 20)           // Правильно: txCircle (200, 200, 20);
      @endcode

    - Забывают точки с запятой:
      @code
      txSelectFont ("Times", 60)        // Правильно: txSelectFont ("Times", 60);
      @endcode

    - Забывают или путают кавычки:
      @code
      txSelectFont (Times, 60)          // Правильно: txSelectFont ("Times", 60);
      txSelectFont ('Arial', 20)        // Правильно: txSelectFont ("Arial", 20);
      @endcode

    - Ставят лишние точки с запятой там, где "мысль не закончена":
      @code
      int main();                       // Правильно: main()
      @endcode

    - Указвают дробную часть числа не через точку, а через запятую:
      @code
      3,1415                            // Правильно: 3.1415
      @endcode

    - Забывают фигурные скобки:
      @code
                                        // Правильно: int main()
      int main()                        //            {
      txCreateWindow (800, 600);        //            txCreateWindow (800, 600);
      txLine (320, 290, 320, 220);      //            txLine (320, 290, 320, 220);
      return 0;                         //            return 0;
                                        //            }
      @endcode

    - Забывают писать открывающие или закрывающие скобки, или пишут лишние,
      отчего появляются непарные скобки, или путают виды скобок:
      @code
      int main()
          {
          txCreateWindow (800, 600);

          txLine (320, 290, 320, 220;   // Не закрыта круглая скобка
          return 0;
          }
      @endcode
      @code
      int main()
      {
      txCreateWindow {800, 600};        // Фигурные скобки вместо круглых
      return 0;
      }

      txLine (320, 290, 320, 220;       // Команда за пределами функции main()
      }                                 // Лишняя скобка
      @endcode

    - Помещают команды за пределы фигурных скобок
      @code
      int main()
      {
      txCreateWindow (800, 600);
      return 0;
      }

      txLine (320, 290, 320, 220);      // Команда за пределами функции main()
      @endcode

    - Указывают лишние данные в командах или указывают меньше данных (аргументов),
      чем нужно.\n\n
      При таком несоответствии количества параметров <i>(too few arguments... -
      слишком мало агрументов,</i> или <i>too many arguments... - слишком
      много)</i> среда программирования часто указывает на @a правильное
      определение той команды, которая была неверно вызвана. Это нужно для того,
      чтобы вы посмотрели на это определение и вспомнили, сколько данных надо
      передавать. Это совсем @a не означает "ошибки в библиотеке" или "ошибки в
      стандартной команде". Настоящее место ошибки там, где команда вызвана. В
      это место легко попасть, если кликнуть мышкой 2 раза на строку с надписью
      <i>"...at this point in file"</i> в списке ошибок, в нижней части окна
      среды программирования.\n\n
      Примеры таких ошибок:
      @code
      txСircle (100, 100);              // Здесь не указан радиус
      txСircle (200, 200, 20, 30);      // Здесь лишнее число -- txCircle() принимает всего 3 аргумента
      @endcode


    @par Ошибки времени исполнения

    Бывают и логические ошибки, или <i>ошибки времени выполнения (runtime errors).</i> 
    Например, мы не выбрали нужный цвет рисования (по умолчанию он белый), или
    цвет совпал с фоном и поэтому не виден. Или мы нарисовали одну фигуру поверх другой, и
    она закрыла предыдущую, или задали неверные координаты. Эти ошибки появляются
    после запуска программы. Их легко понять, если выполнить на листе бумаги
    все команды одну за другой, в том порядке, в котором они заданы в программе.
    При этом не надо стараться выполнять "так, как лучше", или "как хочется,
    чтобы получилось". Выполняйте так, как будто это не ваша, а совсем чужая работа,
    и вам не интересен ее результат. В тот момент, когда результат разойдется
    с вашим желанием и вы получите странную фигуру, станет понятно место ошибки.

    Конечно лучше, если ошибка произошла на стадии компиляции, чем на стадии
    выполнения, когда искать ее труднее. Поскольку человеку избежать ошибок
    невозможно, один из видов мастерства состоит в том, чтобы постараться
    перевести хотя бы часть ошибок из стадии исполнения на стадию компиляции.
    Пусть они происходят там, где их легче ловить. :)

    @par Ошибки и стиль программирования

    Правильное оформление кода (стиль программирования) помогает перевести 
    ошибки стадии выполнения на стадию набора текста, и находить их даже до
    компиляции. Например, неверные координаты очень сложно проследить в
    "примере плохо написанной программы" (см. выше). Сделать это гораздо легче
    в "законченном примере" (см. ниже), где все числа, операторы и команды аккуратно
    выровнены. Если программа длиннее нескольких строк, то между ее логическими 
    частями ставят пустые строки (вместо "красных строк" в русском языке), 
    это позволяет не напрягать логическое мышление зазря, а концентрироваться
    на творчестве и на развитии программы.

    Оформлять код "красиво" уже после того, как программа написана и отлажена,
    достаточно бессмысленно -- хороший стиль облегчает написание и отладку,
    а ведь программа уже готова. :) Поэтому ставить пробелы, пустые строки и
    выравнивать текст нужно сразу, при наборе, и приучиться это делать 
    автоматически, как (хочется надеяться) вы автоматически моете руки перед
    едой. :)

    Многие опытные люди, желая помочь вам, бывают разочарованы плохим стилем
    и перестают помогать и советовать. Поэтому чтобы регулярно получать помощь
    знатоков, нужно держать стиль на высоте. К счастью, оформить программу -
    это самое легкое дело в программировании, но и одновременно это первый шаг
    к надежности и мастерству.

    @section    Tutor_1st_Code        Законченный пример
    @include    "Example01.cpp"
*/
//-----------------------------------------------------------------------------
/*! @page       Tutor_1st_2           Пример: Улучшенный :)

    @section    Tutor_1st_2_Code      Законченный пример
    @include    "Example02.cpp"
*/
//-----------------------------------------------------------------------------
/*! @page       Tutor_Funcs           Пример: Функции

    @section    Tutor_Funcs_Code      Законченный пример
    @include    "Example03.cpp"
*/
//-----------------------------------------------------------------------------
/*! @page       Tutor_Params          Пример: Функции с параметрами

    @section    Tutor_Params_Code     Законченный пример
    @include    "Example04.cpp"
*/
//-----------------------------------------------------------------------------
/*! @page       Tutor_Loops           Пример: Циклы

    @section    Tutor_Loops_Code      Законченный пример
    @include    "Example05.cpp"
*/
//-----------------------------------------------------------------------------
/*! @page       Tutor_Loops_2         Пример: Циклы (2)

    @section    Tutor_Loops_2_Code    Законченный пример
    @include    "Example06.cpp"
*/

//}
